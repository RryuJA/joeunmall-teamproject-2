package com.javateam.dummyProject.service;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.javateam.dummyProject.domain.OrderProductVO;
import com.javateam.dummyProject.domain.OrderVO;
import com.javateam.dummyProject.domain.ProductVO;
import com.javateam.dummyProject.domain.UserVO;

import lombok.extern.slf4j.Slf4j;

/**
 * @author RJA
 */

@Service
@Slf4j
public class OrderService {
	
	/** USER_TBL에 저장된 고객정보 50명 저장 */
	private List<UserVO> userDummy;
	
	/** PRODUCT_TBL에 저장된 상품정보 250개 저장 */
	private List<ProductVO> productDummy;
	
	/** ORDER_PRODUCT_TBL에 저장된 주문상품정보 100개 저장 */
	private List<OrderProductVO> orderProductDummy;
	
	/** 주문번호별 총액 저장 */
	Map<String, Integer> orderPrice = new LinkedHashMap();
	
	/**
	 * UserDAO.selectUserTBLRandom() 결과를 가져옴
	 * @param userDummy
	 */
	public void setUserDummy(List<UserVO> userDummy) {
		this.userDummy = userDummy;
	}
	
	/**
	 * ProductDAO.selectProductTBLALL() 결과를 가져옴
	 * @param productDummy
	 */
	public void setProductDummy(List<ProductVO> productDummy) {
		this.productDummy = productDummy;
	}
	
	/**
	 * OrderProductDAO.selectOrderProductTBLAll() 결과를 가져옴
	 * @param orderProductDummy
	 */
	public void setOrderProductDummy(List<OrderProductVO> productDummy) {
		this.orderProductDummy = orderProductDummy;
	}
	
	/**
	 * Map에 주문번호별 총액을 저장
	 * key: 주문번호
	 * value: 총액
	 */
	private void makePriceMap() {
		for(int i=0; i<100; i++) {
			//주문상품List에서 주문번호만 가져옴
			String orderIndex = orderProductDummy.get(i).getOrderProductIndex().substring(0, 16);
			
			if(orderPrice.containsKey(orderIndex)) {
				
			} else {
				
			}
		}
	}
	
	/**
	 * 주문번호 형식 : ﻿00_00_000
	 * '주문일자 6자리'_'고객번호 7자리'_'고객의 당일 주문 순서 1자리'
	 * @return 주문번호
	 */	
	private String makeOrderIndex() {
		String result = ""
		return result;
	}
	

	/**
	 * 더미데이터 -> 직렬화
	 * OrderVO
	 */
	public void dummyData() {
		List<OrderVO> orderList = new ArrayList<>();
		OrderVO orderVO;
		
		for(int i=0; i<100; i++) {
			orderVO = new OrderVO();
			
			orderVO.setOrderIndex();
			orderVO.setUserIndex();
			orderVO.setOrderStateIndex();
			orderVO.setPaymentIndex();
			orderVO.setOrderDate();
			orderVO.setOrderPrice();
			orderVO.setOrderName();
			orderVO.setOrderPost();
			orderVO.setOrderAddress();
			orderVO.setOrderAddressDetail();
			
			log.info(orderVO.toString());
			
			orderList.add(orderVO);
			
		}
		
		log.info("직렬화 시작");
		
		String fileLocation = new File("C:\\joeunmall-teamproject2\\workspace_project_sub\\joeunmall-Dummy\\src\\main\\resources\\ser").getAbsolutePath() 
								+ "\\OrderListDummy.ser";
		
		try (FileOutputStream     fos = new FileOutputStream(fileLocation);
			 BufferedOutputStream bos = new BufferedOutputStream(fos);) 
		{
			ObjectOutputStream out = new ObjectOutputStream(bos);
			out.writeObject(orderList);
			
		} catch (IOException e) {
			
			log.error("직렬화 저장 에러 : " + e);
			e.printStackTrace();
		} 
		
		log.info("직렬화 종료");
	}
	
	/**
	 * 역직렬화 후 List로 반환
	 * 
	 * @param 역직렬화 할 파일 경로
	 * @return 역직렬화 된 List(OrderVO)
	 * @throws FileNotFoundException
	 */
	@SuppressWarnings("unchecked")
	public List<OrderVO> getOrderListFromSerFile(String filePath) throws FileNotFoundException {
		
		File file = new File(filePath);
		List<OrderVO> orderList = null;
		
		try (FileInputStream     fis = new FileInputStream(file);
			 BufferedInputStream bis = new BufferedInputStream(fis);) {
		
			ObjectInputStream in = new ObjectInputStream(bis);
			
			orderList = (List<OrderVO>)in.readObject();
			
		} catch (IOException e) {
			log.error("역직렬화 에러 : " + e);
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			log.error("직렬화 파일 로딩 오류 : " + e);
			e.printStackTrace();
		}
		
		return orderList;
	} 
	
}
